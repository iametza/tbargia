module.exports = (function() {
	var ConsoleLogger = require('./lib/consoleLogger');

	var consoleLogger = new ConsoleLogger();

	var logger = function() {
		consoleLogger.useSymbols = false;
	};

	logger.__logger = {};
	logger.__logStr = [];
	logger.__logData = [];

	logger.__logLevels = {
		error: 1,
		warn: 2,
		sys: 3,
		req: 4,
		res: 5,
		info: 6,
		debug: 7
	};

	logger.__curLogLevel = 3;

	/**
	 * Add a logger
	 *
	 * @method addLogger
	 * @param {Object} logger Logger Object
	 */
	logger.addLogger = function(logger) {
		if (logger.name && !this.__logger[logger.name]) {
			this.__logger[logger.name] = logger;
		}
	};

	/**
	 * Remove a logger
	 *
	 * @method removeLogger
	 * @param {String} loggerName Logger name
	 */
	logger.removeLogger = function(loggerName) {
		if (logger.name && this.__logger[logger.name]) {
			delete this.__logger[logger.name];
		}	
	};

	/**
	 * Set a message
	 *
	 * @method msg
	 * @chainable
	 * @param {String} styles Message style options (Optional)
	 * @param {String} msg Message
	 */
	logger.msg = function(styles, msg) {
		if (arguments.length === 1) {
			this.__logStr.push([null, styles]);
		}
		else {
			this.__logStr.push([styles, msg]);
		}

		return this;
	};

	/**
	 * Set data
	 *
	 * @method data
	 * @chainable
	 * @param {Object} data Data
	 */
	logger.data = function(data) {
		this.__logData.push(data);
		return this;
	};

	/**
	 * Sends a log to all logger
	 *
	 * @method log
	 * @param {String} type Loging type
	 */
	logger.log = function(type) {
		if (typeof type === 'undefined') {
			type = 'info';
		}

		//Check log level
		var curLevel = this.__logLevels[type];
		if (!curLevel) {
			curLevel = this.__logLevels.info;
			level = 'info';
		}
		
		if (curLevel && curLevel <= this.__curLogLevel) {
			for (var key in this.__logger) {
				var loggerObj = this.__logger[key];
				loggerObj.log(type, this.__logStr, this.__logData);
			}
		}

			this.__logStr = [];
			this.__logData = [];
	};

	//

	

	logger.debug = function(msg, data) {
		if (arguments.length === 2) {
			this.msg(msg).data(data).log('debug');
		}
		else {
			this.msg(msg).log('debug');
		}
	};

	logger.req = function(msg, data) {
		if (arguments.length === 2) {
			this.msg(msg).data(data).log('req');
		}
		else {
			this.msg(msg).log('req');
		}
	};

	logger.res = function(msg, data) {
		if (arguments.length === 2) {
			this.msg(msg).data(data).log('res');
		}
		else {
			this.msg(msg).log('res');
		}
	};

	logger.warning = function(msg, data) {
		if (arguments.length === 2) {
			this.msg(msg).data(data).log('warn');
		}
		else {
			this.msg(msg).log('warn');
		}
	};

	logger.error = function(msg, data) {
		if (arguments.length === 2) {
			this.msg(msg).data(data).log('error');
		}
		else {
			this.msg(msg).log('error');
		}
	};

	logger.info = function(msg, data) {
		if (arguments.length === 2) {
			this.msg(msg).data(data).log('info');
		}
		else {
			this.msg(msg).log('info');
		}
	};

	logger.system = function(msg, data) {
		if (arguments.length === 2) {
			this.msg(msg).data(data).log('sys');
		}
		else {
			this.msg(msg).log('sys');
		}
	};

	//Aliases
	logger.dev = logger.debug;
	logger.err = logger.error;
	logger.sys = logger.system;
	logger.warn = logger.warning;

	logger.help = function() {
		console.log(
			'XQNode logger help\n' +
			'\n' +
			'logger.commad("Message", { "Optional Data": "Pretty printed" });\n' +
			'\n' +
			'Commands:\n' +
			'  dev, debug Prints a debug message\n' +
			'  req        Prints a request message\n' +
			'  res        Prints a response message\n' +
			'  log, info  Prints a log message\n' +
			'  warn       Prints a warning\n' +
			'  err, error Prints an error\n' +
			'  data       Prints a readable object\n' +
			'\n' +
			'Make a colorized message with color codes\n' +
			'logger.info("My #yellow[colorized] message");\n' +
			'\n' +
			'Color codes:\n' +
			'  black, red, green, yellow,\n' +
			'  blue, magenta, cyan, white\n' +
			'  bold, italic, underline, blink\n' +
			'  reset\n' +
			'\n' +
			'\n' +
			'\n'
		);
	};

	/**
	 * Set log level
	 */
	logger.setLevel = function(level) {
		this.__curLogLevel = this.__logLevels[level] || this.__logLevels.info;
	};

	/**
	 * Get current log level
	 * @method getLevel
	 * @returns {String} Returns current log level
	 */
	logger.getLevel = function() {
		for (var key in this.__logLevels) {
			if (this.__logLevels[key] === this.__curLogLevel) {
				return key;
			}
		}
	};

	/**
	 * Enable/Disable console logger symbols
	 * @method useSymbols
	 * @param {Boolean} enabled Set to true to enable logger symbols
	 */
	logger.useSymbols = function(enabled) {
		consoleLogger.useSymbols = enabled;
	};

	/**
	 * Express middleware
	 */
	logger.__express = function(req, res, next) {
		var startTime = Date.now();

		var LogIt = function() {
			res.removeListener('finish', LogIt);
			res.removeListener('close', LogIt);
			res.removeListener('error', LogIt);

			var reqLog = logger.msg(req.method + ' ' + req.path),
				dataLog;

			//Status code
			var statusCodeColor = 'dgrey';
			if (res.statusCode >= 400) {
				statusCodeColor = 'red';
			}

			reqLog.msg('grey', ' - ');
			reqLog.msg(statusCodeColor, res.statusCode);

			//Calculate parse time
			var parseTime = Date.now() - startTime,
				parseTimeColor = 'grey';

			if (parseTime > 99) {
				parseTimeColor = 'red';
			}
			else if (parseTime > 49) {
				parseTimeColor = 'orange';
			}

			reqLog.msg(parseTimeColor, ' (' + parseTime + 'ms)');

			if (req.body) {
				dataLog = req.body;
				reqLog.data(dataLog).log('req');
			}
			else {
				reqLog.log('req');
			}
		};

		res.on('finish', LogIt);
		res.on('close', LogIt);
		res.on('error', LogIt);

		next();
	};

	// logger.cli();

	logger.addLogger(consoleLogger);

	return logger;
})();